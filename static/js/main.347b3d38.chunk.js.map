{"version":3,"sources":["backend_api.js","GeneratedImageList.js","TextPromptInput.js","BackendUrlInput.js","utils.js","LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["backendUrl","text","numImages","a","queryStartTime","Date","Promise","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","statusText","_","reject","setTimeout","race","Math","round","Number","EPSILON","JsonBigint","parse","catch","withStyles","generatedImg","borderRadius","classes","generatedImages","ImageObject","imgData","alt","src","className","Grid","container","alignItems","spacing","map","index","item","key","inputPrompt","marginTop","enterPressedCallback","disabled","useState","promptText","setPromptText","TextField","id","label","helperText","placeholder","value","onChange","event","target","fullWidth","onKeyPress","inputBackend","minWidth","loadingSpinner","paddingTop","setBackendValidUrl","isValidBackendEndpoint","setIsValidBackendEndpoint","isCheckingBackendEndpoint","setIsCheckingBackendEndpoint","setBackendUrl","newBackendUrl","str","RegExp","test","checkIfValidBackend","isValid","useEffect","qsBackendUrl","qs","window","location","search","ignoreQueryPrefix","alignContent","xs","error","sizeUnit","size","color","loading","processingSteps","root","display","flexDirection","textAlign","loadingText","isLoading","textIdx","setTextIdx","intervalID","length","clearInterval","Typography","variant","width","margin","title","marginBottom","playgroundSection","flex","justifyContent","settingsSection","padding","maxWidth","searchQueryCard","imagesPerQueryControl","formControl","gallery","height","isFetchingImgs","setIsFetchingImgs","setGeneratedImages","apiError","setApiError","imagesPerQuery","setImagesPerQuery","queryTime","setQueryTime","validBackendUrl","role","aria-label","Card","CardContent","FormControl","InputLabel","Select","labelId","Array","from","keys","num","MenuItem","FormHelperText","console","log","callDalleService","message","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uaAIO,WAAgCA,EAAYC,EAAMC,GAAlD,iBAAAC,EAAA,6DACGC,EAAiB,IAAIC,KADxB,KAEoBC,QAFpB,SAGQC,MAAMP,EAAU,SAAa,CAC5BQ,OAAQ,OACRC,QAAS,CACL,yBAA0B,KAC1B,KAAQ,WAEZC,KAAMC,KAAKC,UAAU,CACjBX,OACA,WAAcC,MAGxBW,MAAK,SAACC,GACJ,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAEzB,OAAOH,KAlBZ,0BAmBKb,OAnBL,KAmBa,IAAIK,SAAQ,SAACY,EAAGC,GAAJ,OAAeC,YACnC,kBAAMD,EAAO,IAAIH,MAAM,cAtBP,QAErB,+BAE4BK,KAF5B,8BAEGP,EAFH,yBAwBI,CACH,cAAiBQ,KAAKC,MAAgE,MAAxD,IAAIlB,KAASD,GAAkB,IAAOoB,OAAOC,UAAkB,IAC7F,cAAiBC,IAAWC,MAAMb,KA1BnC,6C,kEA8BA,WAAmCd,GAAnC,SAAAG,EAAA,sEACUI,MAAMP,EAAY,CAC3BS,QAAS,CACL,yBAA0B,KAC1B,KAAQ,aAEbI,MAAK,SAAUC,GACd,OAAO,KACRc,OAAM,WACL,OAAO,KATR,oF,mCCRQC,OAtBG,iBAAO,CACrBC,aAAc,CACVC,aAAc,UAoBPF,EAhBY,SAAC,GAAgC,IAA/BG,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAC5BC,EAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,IAAX,OAAoB,yBAAKC,IAAG,gCAA2BF,GAC9BG,UAAWN,EAAQF,aAAcM,IAAKA,KACnF,OACI,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAW,SAASC,QAAS,GACxCT,EAAgBU,KAAI,SAACb,EAAcc,GAChC,OACI,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,IAAKF,GACZ,kBAACV,EAAD,CAAaC,QAASL,EAAcM,IAAKQ,Y,SCclDf,OA5BG,iBAAO,CACrBkB,YAAa,CACTC,UAAW,WA0BJnB,EAtBS,SAAC,GAA+C,IAA9CG,EAA6C,EAA7CA,QAASiB,EAAoC,EAApCA,qBAAsBC,EAAc,EAAdA,SACrD,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,kBAACC,EAAA,EAAD,CAAWhB,UAAWN,EAAQe,YAAaQ,GAAG,eAAeC,MAAM,cACxDC,WAAW,+BACXC,YAAY,2BAA2BC,MAAOP,EAC9CQ,SARf,SAAuBC,GACnBR,EAAcQ,EAAMC,OAAOH,QAOSI,WAAS,EAClCC,WAff,SAAoCH,GACd,UAAdA,EAAMf,KACNG,EAAqBG,IAa0BF,SAAUA,O,oCCuCtDrB,OA3DG,iBAAO,CACrBoC,aAAc,CACVC,SAAU,SAEdC,eAAgB,CACZC,WAAY,sBAsDLvC,EAlDS,SAAC,GAIO,IAHHG,EAGE,EAHFA,QAASkB,EAGP,EAHOA,SAAUmB,EAGjB,EAHiBA,mBACnBC,EAEE,EAFFA,uBAAwBC,EAEtB,EAFsBA,0BACxBC,EACE,EADFA,0BAA2BC,EACzB,EADyBA,6BAEpD,EAAoCtB,mBAAS,IAA7C,mBAAOnD,EAAP,KAAmB0E,EAAnB,KASA,SAASd,EAASe,GC/Bf,IAAoBC,IDgCJD,EC/BL,IAAIE,OAAO,wKAKJ,KACNC,KAAKF,ID0BZH,GAA6B,GHClC,SAAP,kCGAYM,CAAoBJ,GAAe9D,MAAK,SAACmE,GACrCT,EAA0BS,GACtBA,GACAX,EAAmBM,GAEvBF,GAA6B,MAC9B7C,OAAM,WACL6C,GAA6B,OAGjCF,GAA0B,GAG9BG,EAAcC,GAGlB,OA1BAM,qBAAU,WACN,IAAMC,EAAeC,IAAGxD,MAAMyD,OAAOC,SAASC,OAAQ,CAACC,mBAAmB,IAAOvF,WAC7EkF,GACAtB,EAASsB,KAEd,CAACR,IAsBA,kBAACnC,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAG8C,aAAa,UACrC,kBAACjD,EAAA,EAAD,CAAMM,MAAI,EAAC4C,GAAI,IACX,kBAACnC,EAAA,EAAD,CAAWhB,UAAWN,EAAQiC,aAAcF,WAAS,EAACR,GAAG,iBAC9CC,MAAM,cAAcG,MAAO3D,EAAYkD,SAAUA,EACjDwC,OAAQpB,GAAyC,KAAftE,EAClCyD,YAAaa,GAAyC,KAAftE,GAAqB,yCAC5D4D,SAAU,SAACC,GAAD,OAAWD,EAASC,EAAMC,OAAOH,WAEzDa,GAA6B,kBAACjC,EAAA,EAAD,CAAMM,MAAI,EAACP,UAAWN,EAAQmC,eAAgBsB,GAAI,GAC5E,kBAAC,cAAD,CAAaE,SAAU,KAAMC,KAAM,EAAGC,MAAM,SAC/BC,QAAStB,SE5ChCuB,EAAkB,CAAC,+DAA6B,mCA0BvClE,OAtCG,iBAAO,CACrBmE,KAAM,CACFC,QAAS,OACTC,cAAe,SACfC,UAAW,SACXnD,UAAW,QAEfoD,YAAa,CACThC,WAAY,WA8BLvC,EAxBQ,SAAC,GAA0B,IAAzBG,EAAwB,EAAxBA,QAASqE,EAAe,EAAfA,UAC9B,EAA8BlD,mBAAS,GAAvC,mBAAOmD,EAAP,KAAgBC,EAAhB,KAEAtB,qBAAU,WACN,IAAMuB,EAAapF,YAAW,WACTkF,EACA,EAAIP,EAAgBU,QACjCF,EAFaD,EAEW,KAG7B,KAEH,OAAO,kBAAMI,cAAcF,MAC5B,IAEH,IAAMJ,EAAcL,EAAgBO,EAAUP,EAAgBU,QAC9D,OACI,yBAAKnE,UAAWN,EAAQgE,MACpB,kBAAC,cAAD,CAAaL,SAAU,KAAMC,KAAM,GAAIC,MAAM,SAASC,QAASO,IAC/D,kBAACM,EAAA,EAAD,CAAYrE,UAAWN,EAAQoE,YAAaQ,QAAS,MAAOR,OCiIzDvE,OAzJG,iBAAO,CACrBmE,KAAM,CACFC,QAAS,OACTY,MAAO,OACPX,cAAe,SACfY,OAAQ,oBACRrE,WAAY,SACZ0D,UAAW,UAEfY,MAAO,CACHC,aAAc,QAElBC,kBAAmB,CACfhB,QAAS,OACTiB,KAAM,EACNL,MAAO,OACPpE,WAAY,SACZ0E,eAAgB,SAChBnE,UAAW,OACXkD,cAAe,UAEnBkB,gBAAiB,CACbnB,QAAS,OACTC,cAAe,SACfmB,QAAS,MACTC,SAAU,SAEdC,gBAAiB,CACbP,aAAc,QAElBQ,sBAAuB,CACnBxE,UAAW,QAEfyE,YAAa,CACTX,OAAQ,OACR5C,SAAU,KAEdwD,QAAS,CACLzB,QAAS,OACTiB,KAAM,IACNI,SAAU,MACVK,OAAQ,OACRR,eAAgB,SAChB1E,WAAY,aACZ4E,QAAS,WA6GFxF,EAxGH,SAAC,GAAe,IAAdG,EAAa,EAAbA,QACV,EAAoCmB,mBAAS,IAA7C,mBAAOnD,EAAP,KAAmB0E,EAAnB,KACA,EAA4CvB,oBAAS,GAArD,mBAAOyE,EAAP,KAAuBC,EAAvB,KACA,EAAkE1E,oBAAS,GAA3E,mBAAOqB,EAAP,KAAkCC,EAAlC,KACA,EAA4DtB,oBAAS,GAArE,mBAAOmB,EAAP,KAA+BC,EAA/B,KACA,EAA8CpB,mBAAS,IAAvD,mBAAOlB,EAAP,KAAwB6F,EAAxB,KACA,EAAgC3E,mBAAS,IAAzC,mBAAO4E,EAAP,KAAiBC,EAAjB,KACA,EAA4C7E,mBAAS,GAArD,mBAAO8E,EAAP,KAAuBC,EAAvB,KACA,EAAkC/E,mBAAS,GAA3C,mBAAOgF,EAAP,KAAkBC,EAAlB,KAGMC,EAAkB/D,GAA0BtE,EAiClD,OACI,yBAAKsC,UAAWN,EAAQgE,MACpB,yBAAK1D,UAAWN,EAAQ+E,OACpB,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBACsB,0BAAM0B,KAAK,MAAMC,aAAW,gBAA5B,aAIxBF,GAAmB,6BACjB,kBAAC1B,EAAA,EAAD,CAAYC,QAAQ,QAAQf,MAAM,iBAAlC,yCAKJ,yBAAKvD,UAAWN,EAAQiF,mBACpB,yBAAK3E,UAAWN,EAAQoF,iBACpB,kBAACoB,EAAA,EAAD,CAAMlG,UAAWN,EAAQuF,iBACrB,kBAACkB,EAAA,EAAD,KACI,kBAAC,EAAD,CAAiBpE,mBAAoBK,EACpBJ,uBAAwBA,EACxBC,0BAA2BA,EAC3BE,6BAA8BA,EAC9BD,0BAA2BA,EAC3BtB,SAAU0E,IAC3B,kBAACc,EAAA,EAAD,CAAapG,UAAWN,EAAQwF,sBACnBZ,QAAQ,YACjB,kBAAC+B,EAAA,EAAD,CAAYpF,GAAG,0BAAf,sBAGA,kBAACqF,EAAA,EAAD,CAAQC,QAAQ,yBACRrF,MAAM,mBAAmBG,MAAOsE,EAChC/E,SAAU0E,EACVhE,SAAU,SAACC,GAAD,OAAWqE,EAAkBrE,EAAMC,OAAOH,SACvDmF,MAAMC,KAAKD,MAnEd,IAmE2CE,QAAQrG,KAAI,SAACsG,GAClD,OAAO,kBAACC,EAAA,EAAD,CAAUpG,IAAKmG,EAAM,EAAGtF,MAAOsF,EAAM,GACvCA,EAAM,OAInB,kBAACE,EAAA,EAAD,oCAGJ,kBAAC,EAAD,CAAiBlG,qBAzEzC,SAA8BG,GAC1BgG,QAAQC,IAAI,6DAA+DjG,EAAa,KACxF4E,EAAY,IACZH,GAAkB,GN3EnB,SAAP,sCM4EQyB,CAAiBtJ,EAAYoD,EAAY6E,GAAgBpH,MAAK,SAACC,GAC3DsH,EAAatH,EAAQ,eACrBgH,EAAmBhH,EAAQ,eAC3B+G,GAAkB,MACnBjG,OAAM,SAAC8D,GACN0D,QAAQC,IAAI,iCAAkC3D,GACxB,YAAlBA,EAAM6D,QACNvB,EAAY,8GAEZA,EAAY,kEAEhBH,GAAkB,OA2De3E,SAAU0E,IAAmBS,MAGvC,IAAdF,GAAmB,kBAACxB,EAAA,EAAD,CAAYC,QAAQ,QAAQf,MAAM,iBAAlC,yBACOsC,EADP,UAItBlG,EAAgBwE,OAAS,GAAKsB,GAAYH,IAC5C,yBAAKtF,UAAWN,EAAQ0F,SA9D5BK,EACO,kBAACpB,EAAA,EAAD,CAAYC,QAAQ,KAAKf,MAAM,SAASkC,GAG/CH,EACO,kBAAC,EAAD,CAAgBvB,UAAWuB,IAG/B,kBAAC,EAAD,CAAoB3F,gBAAiBA,UC5FhCuH,QACW,cAA7BpE,OAAOC,SAASoE,UAEe,UAA7BrE,OAAOC,SAASoE,UAEhBrE,OAAOC,SAASoE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrJ,MAAK,SAAAsJ,GACJA,EAAaC,gBAEdxI,OAAM,SAAA8D,GACL0D,QAAQ1D,MAAMA,EAAM6D,a","file":"static/js/main.347b3d38.chunk.js","sourcesContent":["import JsonBigint from \"json-bigint\";\r\n\r\nconst REQUEST_TIMEOUT_SEC = 60000\r\n\r\nexport async function callDalleService(backendUrl, text, numImages) {\r\n    const queryStartTime = new Date()\r\n    const response = await Promise.race([\r\n        (await fetch(backendUrl + `/dalle`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Bypass-Tunnel-Reminder': \"go\",\r\n                    'mode': 'no-cors'\r\n                },\r\n                body: JSON.stringify({\r\n                    text,\r\n                    'num_images': numImages,\r\n                })\r\n            }\r\n        ).then((response) => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            return response\r\n        })).text(), new Promise((_, reject) => setTimeout(\r\n            () => reject(new Error('Timeout')), REQUEST_TIMEOUT_SEC))\r\n    ]);\r\n\r\n\r\n    return {\r\n        'executionTime': Math.round(((new Date() - queryStartTime) / 1000 + Number.EPSILON) * 100) / 100,\r\n        'generatedImgs': JsonBigint.parse(response)\r\n    }\r\n}\r\n\r\nexport async function checkIfValidBackend(backendUrl) {\r\n    return await fetch(backendUrl, {\r\n        headers: {\r\n            'Bypass-Tunnel-Reminder': \"go\",\r\n            'mode': 'no-cors'\r\n        }\r\n    }).then(function (response) {\r\n        return true\r\n    }).catch(() => {\r\n        return false\r\n    })\r\n}\r\n","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst useStyles = () => ({\r\n    generatedImg: {\r\n        borderRadius: '8px',\r\n    },\r\n});\r\n\r\nconst GeneratedImageList = ({classes, generatedImages}) => {\r\n    const ImageObject = ({imgData, alt}) => <img src={`data:image/png;base64,${imgData}`}\r\n                                                 className={classes.generatedImg} alt={alt}/>\r\n    return (\r\n        <Grid container alignItems=\"center\" spacing={3}>\r\n            {generatedImages.map((generatedImg, index) => {\r\n                return (\r\n                    <Grid item key={index}>\r\n                        <ImageObject imgData={generatedImg} alt={index}/>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(GeneratedImageList)","import React, {useState} from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nconst useStyles = () => ({\r\n    inputPrompt: {\r\n        marginTop: '20px',\r\n    },\r\n})\r\n\r\nconst TextPromptInput = ({classes, enterPressedCallback, disabled}) => {\r\n    const [promptText, setPromptText] = useState('');\r\n\r\n    function handleTextPromptKeyPressed(event) {\r\n        if (event.key === 'Enter') {\r\n            enterPressedCallback(promptText)\r\n        }\r\n    }\r\n\r\n    function onTextChanged(event) {\r\n        setPromptText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <TextField className={classes.inputPrompt} id=\"prompt-input\" label=\"Text prompt\"\r\n                   helperText=\"hit Enter to generate images\"\r\n                   placeholder=\"e.g. an apple on a table\" value={promptText}\r\n                   onChange={onTextChanged} fullWidth\r\n                   onKeyPress={handleTextPromptKeyPressed} disabled={disabled}/>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(TextPromptInput);\r\n","import React, {useEffect, useState} from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport {Grid, TextField} from \"@material-ui/core\";\r\nimport {isValidURL} from \"./utils\";\r\nimport {PulseLoader} from \"react-spinners\";\r\nimport qs from \"qs\";\r\nimport {checkIfValidBackend} from \"./backend_api\";\r\n\r\nconst useStyles = () => ({\r\n    inputBackend: {\r\n        minWidth: '220px',\r\n    },\r\n    loadingSpinner: {\r\n        paddingTop: '20px !important',\r\n    }\r\n})\r\n\r\nconst BackendUrlInput = ({\r\n                             classes, disabled, setBackendValidUrl,\r\n                             isValidBackendEndpoint, setIsValidBackendEndpoint,\r\n                             isCheckingBackendEndpoint, setIsCheckingBackendEndpoint,\r\n                         }) => {\r\n    const [backendUrl, setBackendUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        const qsBackendUrl = qs.parse(window.location.search, {ignoreQueryPrefix: true}).backendUrl\r\n        if (qsBackendUrl) {\r\n            onChange(qsBackendUrl)\r\n        }\r\n    }, [setBackendUrl])\r\n\r\n    function onChange(newBackendUrl) {\r\n        if (isValidURL(newBackendUrl)) {\r\n            setIsCheckingBackendEndpoint(true)\r\n            checkIfValidBackend(newBackendUrl).then((isValid) => {\r\n                setIsValidBackendEndpoint(isValid)\r\n                if (isValid) {\r\n                    setBackendValidUrl(newBackendUrl)\r\n                }\r\n                setIsCheckingBackendEndpoint(false)\r\n            }).catch(() => {\r\n                setIsCheckingBackendEndpoint(false)\r\n            })\r\n        } else {\r\n            setIsValidBackendEndpoint(false)\r\n        }\r\n\r\n        setBackendUrl(newBackendUrl)\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} alignContent=\"center\">\r\n            <Grid item xs={10}>\r\n                <TextField className={classes.inputBackend} fullWidth id=\"standard-basic\"\r\n                           label=\"Backend URL\" value={backendUrl} disabled={disabled}\r\n                           error={!isValidBackendEndpoint && backendUrl !== ''}\r\n                           helperText={!isValidBackendEndpoint && backendUrl !== '' && \"No running DALL-E server with this URL\"}\r\n                           onChange={(event) => onChange(event.target.value)}/>\r\n            </Grid>\r\n            {isCheckingBackendEndpoint && <Grid item className={classes.loadingSpinner} xs={2}>\r\n                <PulseLoader sizeUnit={\"px\"} size={5} color=\"purple\"\r\n                             loading={isCheckingBackendEndpoint}/>\r\n            </Grid>}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(BackendUrlInput);\r\n","export function isValidURL(str) {\r\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n  return !!pattern.test(str);\r\n}","import {PulseLoader} from \"react-spinners\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst useStyles = () => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        marginTop: '80px',\r\n    },\r\n    loadingText: {\r\n        paddingTop: '20px',\r\n    }\r\n});\r\n\r\nconst processingSteps = ['Generating images 👨🏽‍🎨', 'Doing fancy calculations ✨'];\r\n\r\nconst LoadingSpinner = ({classes, isLoading}) => {\r\n    const [textIdx, setTextIdx] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const intervalID = setTimeout(() => {\r\n            let currentIdx = textIdx;\r\n            if (currentIdx + 1 < processingSteps.length) {\r\n                setTextIdx(currentIdx + 1)\r\n            }\r\n\r\n        }, 10000);\r\n\r\n        return () => clearInterval(intervalID);\r\n    }, []);\r\n\r\n    const loadingText = processingSteps[textIdx % processingSteps.length];\r\n    return (\r\n        <div className={classes.root}>\r\n            <PulseLoader sizeUnit={\"px\"} size={20} color=\"purple\" loading={isLoading}/>\r\n            <Typography className={classes.loadingText} variant={\"h6\"}>{loadingText}</Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(LoadingSpinner)","import React, {useState} from 'react';\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport {\r\n    Card, CardContent, FormControl, FormHelperText,\r\n    InputLabel, MenuItem, Select, Typography\r\n} from \"@material-ui/core\";\r\nimport {callDalleService} from \"./backend_api\";\r\nimport GeneratedImageList from \"./GeneratedImageList\";\r\nimport TextPromptInput from \"./TextPromptInput\";\r\n\r\nimport \"./App.css\";\r\nimport BackendUrlInput from \"./BackendUrlInput\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\n\r\nconst useStyles = () => ({\r\n    root: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n        margin: '60px 0px 60px 0px',\r\n        alignItems: 'center',\r\n        textAlign: 'center',\r\n    },\r\n    title: {\r\n        marginBottom: '20px',\r\n    },\r\n    playgroundSection: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: '20px',\r\n        flexDirection: 'column',\r\n    },\r\n    settingsSection: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '1em',\r\n        maxWidth: '600px',\r\n    },\r\n    searchQueryCard: {\r\n        marginBottom: '20px'\r\n    },\r\n    imagesPerQueryControl: {\r\n        marginTop: '20px',\r\n    },\r\n    formControl: {\r\n        margin: \"20px\",\r\n        minWidth: 120,\r\n    },\r\n    gallery: {\r\n        display: 'flex',\r\n        flex: '1',\r\n        maxWidth: '80%',\r\n        height: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start',\r\n        padding: '1rem',\r\n    },\r\n});\r\n\r\n\r\nconst App = ({classes}) => {\r\n    const [backendUrl, setBackendUrl] = useState('');\r\n    const [isFetchingImgs, setIsFetchingImgs] = useState(false);\r\n    const [isCheckingBackendEndpoint, setIsCheckingBackendEndpoint] = useState(false);\r\n    const [isValidBackendEndpoint, setIsValidBackendEndpoint] = useState(true);\r\n    const [generatedImages, setGeneratedImages] = useState([]);\r\n    const [apiError, setApiError] = useState('')\r\n    const [imagesPerQuery, setImagesPerQuery] = useState(2);\r\n    const [queryTime, setQueryTime] = useState(0);\r\n\r\n    const imagesPerQueryOptions = 10\r\n    const validBackendUrl = isValidBackendEndpoint && backendUrl\r\n\r\n    function enterPressedCallback(promptText) {\r\n        console.log('API call to DALL-E web service with the following prompt [' + promptText + ']');\r\n        setApiError('')\r\n        setIsFetchingImgs(true)\r\n        callDalleService(backendUrl, promptText, imagesPerQuery).then((response) => {\r\n            setQueryTime(response['executionTime'])\r\n            setGeneratedImages(response['generatedImgs'])\r\n            setIsFetchingImgs(false)\r\n        }).catch((error) => {\r\n            console.log('Error querying DALL-E service.', error)\r\n            if (error.message === 'Timeout') {\r\n                setApiError('Timeout querying DALL-E service (>1min). Consider reducing the images per query or use a stronger backend.')\r\n            } else {\r\n                setApiError('Error querying DALL-E service. Check your backend server logs.')\r\n            }\r\n            setIsFetchingImgs(false)\r\n        })\r\n    }\r\n\r\n    function getGalleryContent() {\r\n        if (apiError) {\r\n            return <Typography variant=\"h5\" color=\"error\">{apiError}</Typography>\r\n        }\r\n\r\n        if (isFetchingImgs) {\r\n            return <LoadingSpinner isLoading={isFetchingImgs}/>\r\n        }\r\n\r\n        return <GeneratedImageList generatedImages={generatedImages}/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.title}>\r\n                <Typography variant=\"h3\">\r\n                    DALL-E Playground <span role=\"img\" aria-label=\"sparks-emoji\">✨</span>\r\n                </Typography>\r\n            </div>\r\n\r\n            {!validBackendUrl && <div>\r\n                <Typography variant=\"body1\" color=\"textSecondary\">\r\n                    Put your DALL-E backend URL to start\r\n                </Typography>\r\n            </div>}\r\n\r\n            <div className={classes.playgroundSection}>\r\n                <div className={classes.settingsSection}>\r\n                    <Card className={classes.searchQueryCard}>\r\n                        <CardContent>\r\n                            <BackendUrlInput setBackendValidUrl={setBackendUrl}\r\n                                             isValidBackendEndpoint={isValidBackendEndpoint}\r\n                                             setIsValidBackendEndpoint={setIsValidBackendEndpoint}\r\n                                             setIsCheckingBackendEndpoint={setIsCheckingBackendEndpoint}\r\n                                             isCheckingBackendEndpoint={isCheckingBackendEndpoint}\r\n                                             disabled={isFetchingImgs}/>\r\n                            <FormControl className={classes.imagesPerQueryControl}\r\n                                         variant=\"outlined\">\r\n                                <InputLabel id=\"images-per-query-label\">\r\n                                    Images to generate\r\n                                </InputLabel>\r\n                                <Select labelId=\"images-per-query-label\"\r\n                                        label=\"Images per query\" value={imagesPerQuery}\r\n                                        disabled={isFetchingImgs}\r\n                                        onChange={(event) => setImagesPerQuery(event.target.value)}>\r\n                                    {Array.from(Array(imagesPerQueryOptions).keys()).map((num) => {\r\n                                        return <MenuItem key={num + 1} value={num + 1}>\r\n                                            {num + 1}\r\n                                        </MenuItem>\r\n                                    })}\r\n                                </Select>\r\n                                <FormHelperText>More images = slower query</FormHelperText>\r\n                            </FormControl>\r\n    \r\n                            <TextPromptInput enterPressedCallback={enterPressedCallback}\r\n                                             disabled={isFetchingImgs || !validBackendUrl}/>\r\n                        </CardContent>\r\n                    </Card>\r\n                    {queryTime !== 0 && <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        Query execution time: {queryTime} sec\r\n                    </Typography>}\r\n                </div>\r\n                {(generatedImages.length > 0 || apiError || isFetchingImgs) &&\r\n                <div className={classes.gallery}>\r\n                    {getGalleryContent()}\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}